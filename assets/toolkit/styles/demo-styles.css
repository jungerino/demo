code,
kbd,
pre,
samp {
  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }

code {
  font-size: 87.5%;
  color: #e83e8c;
  word-break: break-word; }
  a > code {
    color: inherit; }

kbd {
  padding: 0.2rem 0.4rem;
  font-size: 87.5%;
  color: #fff;
  background-color: #212529;
  border-radius: 0.2rem; }
  kbd kbd {
    padding: 0;
    font-size: 100%;
    font-weight: 700; }

pre {
  display: block;
  font-size: 87.5%;
  color: #212529; }
  pre code {
    font-size: inherit;
    color: inherit;
    word-break: normal; }

.pre-scrollable {
  max-height: 340px;
  overflow-y: scroll; }

.demo-switcher, .demo-size-control, .demo-color-tile {
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.07), 0 1px 2px rgba(0, 0, 0, 0.12); }

.demo-layout-contexts .layout-context-main:before, .demo-layout-contexts .layout-context-narrow:before, .demo-layout-contexts .layout-context-full:before {
  border-bottom: 1px solid #bdbdbd;
  color: #676767;
  display: block;
  font-size: 0.6875rem;
  font-weight: 500;
  margin-bottom: 1.5em;
  padding: 0.25em;
  pointer-events: none;
  text-align: center;
  text-transform: uppercase; }

.demo-layout-contexts .demo-context {
  position: relative; }

.demo-layout-contexts .layout-context-main:before {
  content: 'Main Column'; }

.demo-layout-contexts .layout-context-narrow:before {
  content: 'Narrow Column'; }

.demo-layout-contexts .layout-context-full:before {
  content: 'Full Width'; }

.demo-layout-contexts *:after {
  font-family: monospace;
  font-weight: 400;
  margin-left: 0.5em;
  opacity: 0.4; }

.demo-layout-contexts p:after {
  content: '<p>'; }

.demo-layout-contexts h1:after {
  content: '<h1>'; }

.demo-layout-contexts h2:after {
  content: '<h2>'; }

.demo-layout-contexts h3:after {
  content: '<h3>'; }

.demo-layout-contexts h4:after {
  content: '<h4>'; }

.demo-layout-contexts h5:after {
  content: '<h5>'; }

.demo-layout-contexts .jungerino-caption:after {
  content: 'class="jungerino-caption"'; }

.demo-layout-contexts .jungerino-label:after {
  content: 'class="jungerino-label"'; }

.demo-switcher {
  left: 50%;
  transform: translateX(-50%);
  background-color: #fff;
  display: flex;
  height: 2.5em;
  line-height: 2.5em;
  position: absolute;
  top: 0.625rem; }
  .demo-switcher a {
    border-right: 1px solid #e9e9e9;
    justify-content: center;
    flex: 0 0 auto;
    font-size: 0.9375rem;
    font-weight: 500;
    padding: 0 1em; }
    .demo-switcher a.active {
      background-color: #e9e9e9;
      color: #3b3b3b;
      pointer-events: none; }

.demo-breakpoints {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08), 0 3px 6px rgba(0, 0, 0, 0.115);
  background-color: #fff;
  bottom: 1.25rem;
  display: flex;
  font-family: open-sans;
  font-size: 0.9375rem;
  font-weight: 500;
  height: 3.125rem;
  left: 1.25rem;
  position: fixed;
  transition: all 0.15s ease-in-out;
  z-index: 20; }
  .demo-breakpoints > div {
    border-right: 1px solid #e9e9e9;
    display: flex;
    justify-content: center;
    font-weight: 500;
    flex-direction: column;
    line-height: 1;
    padding: 0 1em; }
  .demo-breakpoints .demo-breakpoint-size {
    align-items: center;
    color: #676767;
    font-size: 1.5rem;
    font-weight: 200;
    text-transform: uppercase; }
  .demo-breakpoints .demo-breakpoint-label {
    color: #676767;
    font-size: 0.625rem;
    font-weight: 300;
    letter-spacing: 0.05em;
    margin-bottom: 0.5em;
    text-transform: uppercase; }
  .demo-breakpoints .demo-breakpoint-grid {
    align-items: center;
    font-size: 0.8125rem;
    padding: 0;
    width: 6rem; }

.demo-grid {
  display: none;
  height: 100%;
  pointer-events: none;
  position: absolute;
  top: 0;
  width: 100%; }
  .demo-grid .container {
    height: 100%; }
  .demo-grid .col {
    border: 0 solid rgba(0, 166, 237, 0.75);
    border-right-width: 1px;
    border-bottom: 0;
    border-top: 0; }
    .demo-grid .col:first-of-type {
      border-left-width: 1px; }

.demo-size-control {
  background-color: #fdfdfd;
  line-height: 3em;
  margin-bottom: 1.5em; }
  .demo-size-control > * {
    vertical-align: middle; }
  .demo-size-control input {
    margin-left: 1em; }
  .demo-size-control span {
    font-weight: 500; }

.demo-color-tiles {
  display: block;
  margin: 0 -0.9375rem; }
  .demo-color-tiles::after {
    display: block;
    clear: both;
    content: ""; }

.demo-color-tile {
  border-top-width: 8em;
  border-top-style: solid;
  border-bottom-width: 0;
  border-bottom-style: solid;
  background-color: #fff;
  display: block;
  float: left;
  font-weight: 700;
  font-size: 0.75em;
  margin: 0.9375rem;
  padding: 1em;
  width: 16.25rem; }
  .demo-color-tile .demo-color-tile__color {
    background-color: #fff;
    color: #676767;
    font-size: 0.9375rem;
    font-weight: 400; }
  .demo-color-tile .demo-color-tile__name {
    font-family: open-sans;
    font-size: 0.9375rem;
    font-weight: 500; }

.single-select-demo.open ul {
  display: block; }

.single-select-demo.open button:after {
  top: 0.5em;
  transform: rotate(180deg); }

body {
  background-color: #f6f6f6; }

.f-item-notes {
  margin-bottom: 30px; }
  .f-item-notes code {
    background-color: #fff;
    color: #061528;
    outline: 1px solid rgba(0, 0, 0, 0.1); }
  .f-item-notes p {
    max-width: none; }

.f-control-bar + h1 {
  color: #3b3b3b;
  font-family: open-sans;
  font-weight: 300;
  margin-bottom: 30px; }

.f-item-heading {
  color: #3b3b3b;
  font-family: open-sans;
  font-size: 18px;
  font-weight: 700;
  text-transform: uppercase; }

.f-item-group {
  border-bottom: 1px solid #a0a0a0; }

.f-menu {
  display: flex;
  flex-direction: column;
  font-family: 'open-sans';
  font-size: 0.875rem;
  height: 100vh;
  width: 12.5rem; }
  .f-menu a {
    font-size: 0.875rem;
    font-weight: 400; }
  .f-menu .f-menu__heading {
    align-items: center;
    border-bottom: 1px solid #e9e9e9;
    border-top: 1px solid #e9e9e9;
    display: flex;
    font-size: 1rem;
    font-weight: normal;
    height: 42px;
    margin-top: -1px;
    padding-left: 1.5rem;
    text-transform: none; }
  .f-menu h2 {
    color: #000;
    font-size: 0.75rem;
    font-weight: 700;
    margin: 1rem 2rem 0.3rem;
    border-bottom: 0; }
  .f-menu .collapse {
    height: auto;
    overflow: auto; }
  .f-menu .menu-links {
    padding-top: 1em; }
    .f-menu .menu-links a {
      padding-left: 1em; }
  .f-menu > ul {
    display: flex;
    flex-direction: column;
    margin-bottom: 0;
    max-height: calc(100vh - 54px); }
    .f-menu > ul > li {
      margin-top: 0; }

.mvm {
  font-family: open-sans;
  font-size: 24px;
  font-weight: 300; }

.fs0 {
  display: none; }

.glyph.fs1 {
  background-color: #fff;
  float: left;
  height: 100px;
  margin: 10px;
  padding: 20px;
  width: 240px; }
  .glyph.fs1 i {
    display: block;
    margin-bottom: 10px; }

.pbs {
  text-align: center; }
  .pbs span {
    display: block; }

.mls {
  font-size: 15px;
  line-height: 1; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
