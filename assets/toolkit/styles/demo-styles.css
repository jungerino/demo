code,
kbd,
pre,
samp {
  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }

code {
  font-size: 87.5%;
  color: #e83e8c;
  word-break: break-word; }
  a > code {
    color: inherit; }

kbd {
  padding: 0.2rem 0.4rem;
  font-size: 87.5%;
  color: #fff;
  background-color: #212529;
  border-radius: 0.2rem; }
  kbd kbd {
    padding: 0;
    font-size: 100%;
    font-weight: 700; }

pre {
  display: block;
  font-size: 87.5%;
  color: #212529; }
  pre code {
    font-size: inherit;
    color: inherit;
    word-break: normal; }

.pre-scrollable {
  max-height: 340px;
  overflow-y: scroll; }

.demo-switcher, .demo-size-control, .demo-color-tile, .shadowbox-controls {
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.07), 0 1px 2px rgba(0, 0, 0, 0.12); }

.demo-layout-contexts .layout-context-main:before, .demo-layout-contexts .layout-context-narrow:before, .demo-layout-contexts .layout-context-full:before {
  border-bottom: 1px solid #bdbdbd;
  color: #676767;
  display: block;
  font-size: 0.6875rem;
  font-weight: 500;
  margin-bottom: 1.5em;
  padding: 0.25em;
  pointer-events: none;
  text-align: center;
  text-transform: uppercase; }

.demo-layout-contexts .demo-context {
  position: relative; }

.demo-layout-contexts .layout-context-main:before {
  content: 'Main Column'; }

.demo-layout-contexts .layout-context-narrow:before {
  content: 'Narrow Column'; }

.demo-layout-contexts .layout-context-full:before {
  content: 'Full Width'; }

.demo-layout-contexts *:after {
  font-family: monospace;
  font-weight: 400;
  margin-left: 0.5em;
  opacity: 0.4; }

.demo-layout-contexts p:after {
  content: '<p>'; }

.demo-layout-contexts h1:after {
  content: '<h1>'; }

.demo-layout-contexts h2:after {
  content: '<h2>'; }

.demo-layout-contexts h3:after {
  content: '<h3>'; }

.demo-layout-contexts h4:after {
  content: '<h4>'; }

.demo-layout-contexts h5:after {
  content: '<h5>'; }

.demo-layout-contexts .jungerino-caption:after {
  content: 'class="jungerino-caption"'; }

.demo-layout-contexts .jungerino-label:after {
  content: 'class="jungerino-label"'; }

.demo-switcher {
  left: 50%;
  transform: translateX(-50%);
  background-color: #fff;
  display: flex;
  height: 2.5em;
  line-height: 2.5em;
  position: absolute;
  top: 0.625rem; }
  .demo-switcher a {
    border-right: 1px solid #e9e9e9;
    justify-content: center;
    flex: 0 0 auto;
    font-size: 0.9375rem;
    font-weight: 500;
    padding: 0 1em; }
    .demo-switcher a.active {
      background-color: #e9e9e9;
      color: #3b3b3b;
      pointer-events: none; }

.demo-breakpoints {
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08), 0 3px 6px rgba(0, 0, 0, 0.115);
  background-color: #fff;
  bottom: 1.25rem;
  display: flex;
  font-family: open-sans;
  font-size: 0.9375rem;
  font-weight: 500;
  height: 3.125rem;
  left: 1.25rem;
  position: fixed;
  transition: all 0.15s ease-in-out;
  z-index: 20; }
  .demo-breakpoints > div {
    border-right: 1px solid #e9e9e9;
    display: flex;
    justify-content: center;
    font-weight: 500;
    flex-direction: column;
    line-height: 1;
    padding: 0 1em; }
  .demo-breakpoints .demo-breakpoint-size {
    align-items: center;
    color: #676767;
    font-size: 1.5rem;
    font-weight: 200;
    text-transform: uppercase; }
  .demo-breakpoints .demo-breakpoint-label {
    color: #676767;
    font-size: 0.625rem;
    font-weight: 300;
    letter-spacing: 0.05em;
    margin-bottom: 0.5em;
    text-transform: uppercase; }
  .demo-breakpoints .demo-breakpoint-grid {
    align-items: center;
    font-size: 0.8125rem;
    padding: 0;
    width: 6rem; }

.demo-grid {
  display: none;
  height: 100%;
  pointer-events: none;
  position: absolute;
  top: 0;
  width: 100%; }
  .demo-grid .container {
    height: 100%; }
  .demo-grid .col {
    border: 0 solid rgba(0, 166, 237, 0.75);
    border-right-width: 1px;
    border-bottom: 0;
    border-top: 0; }
    .demo-grid .col:first-of-type {
      border-left-width: 1px; }

.demo-size-control {
  background-color: #fdfdfd;
  line-height: 3em;
  margin-bottom: 1.5em; }
  .demo-size-control > * {
    vertical-align: middle; }
  .demo-size-control input {
    margin-left: 1em; }
  .demo-size-control span {
    font-weight: 500; }

.demo-color-tiles {
  display: block;
  margin: 0 -0.9375rem; }
  .demo-color-tiles::after {
    display: block;
    clear: both;
    content: ""; }

.demo-color-tile {
  border-top-width: 8em;
  border-top-style: solid;
  border-bottom-width: 0;
  border-bottom-style: solid;
  background-color: #fff;
  display: block;
  float: left;
  font-weight: 700;
  font-size: 0.75em;
  margin: 0.9375rem;
  padding: 1em;
  width: 16.25rem; }
  .demo-color-tile .demo-color-tile__color {
    background-color: #fff;
    color: #676767;
    font-size: 0.9375rem;
    font-weight: 400; }
  .demo-color-tile .demo-color-tile__name {
    font-family: open-sans;
    font-size: 0.9375rem;
    font-weight: 500; }

.single-select-demo.open ul {
  display: block; }

.single-select-demo.open button:after {
  top: 0.5em;
  transform: rotate(180deg); }

body {
  background-color: #f6f6f6; }

.f-item-notes {
  margin-bottom: 30px; }
  .f-item-notes code {
    background-color: #fff;
    color: #061528;
    outline: 1px solid rgba(0, 0, 0, 0.1); }
  .f-item-notes p {
    max-width: none; }

.f-control-bar + h1 {
  color: #3b3b3b;
  font-family: open-sans;
  font-weight: 300;
  margin-bottom: 30px; }

.f-item-heading {
  color: #3b3b3b;
  font-family: open-sans;
  font-size: 18px;
  font-weight: 700;
  text-transform: uppercase; }

.f-item-group {
  border-bottom: 1px solid #a0a0a0; }

.f-menu {
  display: flex;
  flex-direction: column;
  font-family: 'open-sans';
  font-size: 0.875rem;
  height: 100vh;
  width: 12.5rem; }
  .f-menu a {
    font-size: 0.875rem;
    font-weight: 400; }
  .f-menu .f-menu__heading {
    align-items: center;
    border-bottom: 1px solid #e9e9e9;
    border-top: 1px solid #e9e9e9;
    display: flex;
    font-size: 1rem;
    font-weight: normal;
    height: 42px;
    margin-top: -1px;
    padding-left: 1.5rem;
    text-transform: none; }
  .f-menu h2 {
    color: #000;
    font-size: 0.75rem;
    font-weight: 700;
    margin: 1rem 2rem 0.3rem;
    border-bottom: 0; }
  .f-menu .collapse {
    height: auto;
    overflow: auto; }
  .f-menu .menu-links {
    padding-top: 1em; }
    .f-menu .menu-links a {
      padding-left: 1em; }
  .f-menu > ul {
    display: flex;
    flex-direction: column;
    margin-bottom: 0;
    max-height: calc(100vh - 54px); }
    .f-menu > ul > li {
      margin-top: 0; }

.mvm {
  font-family: open-sans;
  font-size: 24px;
  font-weight: 300; }

.fs0 {
  display: none; }

.glyph.fs1 {
  background-color: #fff;
  float: left;
  height: 100px;
  margin: 10px;
  padding: 20px;
  width: 240px; }
  .glyph.fs1 i {
    display: block;
    margin-bottom: 10px; }

.pbs {
  text-align: center; }
  .pbs span {
    display: block; }

.mls {
  font-size: 15px;
  line-height: 1; }

.demo-switcher, .demo-size-control, .demo-color-tile, .shadowbox-controls {
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.07), 0 1px 2px rgba(0, 0, 0, 0.12); }

.camera-test {
  margin-top: 3em; }

.shadowbox-outer {
  height: 100vh;
  left: 0;
  overflow: hidden;
  position: absolute;
  top: 0;
  width: 100%; }

.shadowbox-inner {
  position: absolute;
  transform-style: preserve-3d;
  height: 0;
  left: 50%;
  top: 50%; }
  .shadowbox-inner > div {
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%; }
  .shadowbox-inner svg {
    position: absolute; }

.shadowbox-controls {
  background-color: #fff;
  border-radius: 0.1875em;
  bottom: 1em;
  display: inline-block;
  left: 1em;
  line-height: 2.5em;
  padding: 1em;
  position: fixed; }
  .shadowbox-controls > * {
    display: inline-block; }
  .shadowbox-controls .slider-value {
    margin-right: 1em; }

.clouds-1 {
  perspective: 120vw; }
  .clouds-1 .shadowbox-inner {
    margin-left: -30vw;
    margin-top: -20.29091vw;
    padding-bottom: 40.58182vw;
    width: 60vw;
    transition: all 0.25s; }
    .clouds-1 .shadowbox-inner .parallax-layer-0 {
      transform: translateZ(-11.63636vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-1 {
      transform: translateZ(-10.18182vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-2 {
      transform: translateZ(-8.72727vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-3 {
      transform: translateZ(-7.27273vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-4 {
      transform: translateZ(-5.81818vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-5 {
      transform: translateZ(-4.36364vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-6 {
      transform: translateZ(-2.90909vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-7 {
      transform: translateZ(-1.45455vw); }
    .clouds-1 .shadowbox-inner .parallax-layer-8 {
      transform: translateZ(0vw); }
    .clouds-1 .shadowbox-inner.camera-0 {
      transform: translate3d(0, 0, 0); }
  .clouds-1 .parallax-layer-0 {
    background-color: #FFB400; }
  .clouds-1 svg {
    filter: drop-shadow(0 -1vh 2vh rgba(0, 0, 0, 0.1)); }
  .clouds-1 svg[class^="svg-clouds1-1"] {
    fill: #00A6ED; }
  .clouds-1 svg[class^="svg-clouds1-2"] {
    fill: #ccedfb; }

.tile-1 {
  perspective: 70vw; }
  .tile-1 .shadowbox-inner {
    margin-left: -15vw;
    margin-top: -15vw;
    padding-bottom: 30vw;
    width: 30vw;
    transition: all 0.25s; }
    .tile-1 .shadowbox-inner .parallax-layer-0 {
      transform: translateZ(-8.4vw); }
    .tile-1 .shadowbox-inner .parallax-layer-1 {
      transform: translateZ(-7.2vw); }
    .tile-1 .shadowbox-inner .parallax-layer-2 {
      transform: translateZ(-6vw); }
    .tile-1 .shadowbox-inner .parallax-layer-3 {
      transform: translateZ(-4.8vw); }
    .tile-1 .shadowbox-inner .parallax-layer-4 {
      transform: translateZ(-3.6vw); }
    .tile-1 .shadowbox-inner .parallax-layer-5 {
      transform: translateZ(-2.4vw); }
    .tile-1 .shadowbox-inner .parallax-layer-6 {
      transform: translateZ(-1.2vw); }
    .tile-1 .shadowbox-inner .parallax-layer-7 {
      transform: translateZ(0vw); }
    .tile-1 .shadowbox-inner.camera-0 {
      transform: translate3d(0, 0, 0); }
  .tile-1 .parallax-layer-0 {
    background-color: #00A6ED; }
  .tile-1 svg {
    filter: drop-shadow(0 1vh 1vh rgba(0, 0, 0, 0.2)); }
  .tile-1 svg[class^="svg-waves-1"] {
    fill: #00A6ED; }
  .tile-1 svg[class^="svg-waves-2"] {
    fill: #ccedfb; }
  .tile-1 .svg-tile-7,
  .tile-1 .svg-tile-5,
  .tile-1 .svg-tile-3,
  .tile-1 .svg-tile-1 {
    fill: #ccedfb; }
  .tile-1 .svg-tile-6,
  .tile-1 .svg-tile-4,
  .tile-1 .svg-tile-2 {
    fill: #ccedfb; }

.waves-1 {
  perspective: 150vw; }
  .waves-1 .shadowbox-inner {
    margin-left: -25vw;
    margin-top: -16.90625vw;
    padding-bottom: 33.8125vw;
    width: 50vw;
    transition: all 0.25s; }
    .waves-1 .shadowbox-inner .parallax-layer-0 {
      transform: translateZ(-8.75vw); }
    .waves-1 .shadowbox-inner .parallax-layer-1 {
      transform: translateZ(-7.5vw); }
    .waves-1 .shadowbox-inner .parallax-layer-2 {
      transform: translateZ(-6.25vw); }
    .waves-1 .shadowbox-inner .parallax-layer-3 {
      transform: translateZ(-5vw); }
    .waves-1 .shadowbox-inner .parallax-layer-4 {
      transform: translateZ(-3.75vw); }
    .waves-1 .shadowbox-inner .parallax-layer-5 {
      transform: translateZ(-2.5vw); }
    .waves-1 .shadowbox-inner .parallax-layer-6 {
      transform: translateZ(-1.25vw); }
    .waves-1 .shadowbox-inner .parallax-layer-7 {
      transform: translateZ(0vw); }
    .waves-1 .shadowbox-inner.camera-0 {
      transform: translate3d(0, 0, 0); }
  .waves-1 .parallax-layer-0 {
    background-color: #FFB400; }
  .waves-1 svg {
    filter: drop-shadow(0 -1vh 2vh rgba(0, 0, 0, 0.1)); }
  .waves-1 svg[class^="svg-waves-1"] {
    fill: #00A6ED; }
  .waves-1 svg[class^="svg-waves-2"] {
    fill: #ccedfb; }
  .waves-1 .svg-shadow-egg-13,
  .waves-1 .svg-shadow-egg-11,
  .waves-1 .svg-shadow-egg-09,
  .waves-1 .svg-shadow-egg-07,
  .waves-1 .svg-shadow-egg-05,
  .waves-1 .svg-shadow-egg-03,
  .waves-1 .svg-shadow-egg-01 {
    fill: #00A6ED; }
  .waves-1 .svg-shadow-egg-12,
  .waves-1 .svg-shadow-egg-10,
  .waves-1 .svg-shadow-egg-08,
  .waves-1 .svg-shadow-egg-06,
  .waves-1 .svg-shadow-egg-04,
  .waves-1 .svg-shadow-egg-02 {
    fill: #ccedfb; }

.egg-1 {
  perspective: 50vh; }
  .egg-1 .shadowbox-inner {
    margin-left: -35vh;
    margin-top: -35vh;
    padding-bottom: 70vh;
    width: 70vh;
    transition: all 0.25s; }
    .egg-1 .shadowbox-inner .parallax-layer-0 {
      transform: translateZ(-18.49057vh); }
    .egg-1 .shadowbox-inner .parallax-layer-1 {
      transform: translateZ(-15.84906vh); }
    .egg-1 .shadowbox-inner .parallax-layer-2 {
      transform: translateZ(-13.20755vh); }
    .egg-1 .shadowbox-inner .parallax-layer-3 {
      transform: translateZ(-10.56604vh); }
    .egg-1 .shadowbox-inner .parallax-layer-4 {
      transform: translateZ(-7.92453vh); }
    .egg-1 .shadowbox-inner .parallax-layer-5 {
      transform: translateZ(-5.28302vh); }
    .egg-1 .shadowbox-inner .parallax-layer-6 {
      transform: translateZ(-2.64151vh); }
    .egg-1 .shadowbox-inner .parallax-layer-7 {
      transform: translateZ(0vh); }
    .egg-1 .shadowbox-inner.camera-0 {
      transform: translate3d(0, 0, 0); }
  .egg-1 .parallax-layer-0 {
    background-color: #FFB400; }
  .egg-1 svg {
    filter: drop-shadow(0 1vh 1vh rgba(0, 0, 0, 0.2)); }
  .egg-1 .svg-shadow-egg-13,
  .egg-1 .svg-shadow-egg-11,
  .egg-1 .svg-shadow-egg-09,
  .egg-1 .svg-shadow-egg-07,
  .egg-1 .svg-shadow-egg-05,
  .egg-1 .svg-shadow-egg-03,
  .egg-1 .svg-shadow-egg-01 {
    fill: #00A6ED; }
  .egg-1 .svg-shadow-egg-12,
  .egg-1 .svg-shadow-egg-10,
  .egg-1 .svg-shadow-egg-08,
  .egg-1 .svg-shadow-egg-06,
  .egg-1 .svg-shadow-egg-04,
  .egg-1 .svg-shadow-egg-02 {
    fill: #ccedfb; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
